// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int               @id @default(autoincrement())
  name          String            @unique
  email         String            @unique
  password      String
  weight        Float?
  height        Float?
  age           Int?
  dailyCalories Int?              @default(2000)
  fitnessGoal   String?           @default("MAINTAIN")
  activityLevel String?           @default("MODERATE")
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  schedules     Schedule[]
  activities    FitnessActivity[]
  progress      ProgressRecord[]
  workout       Workout[]
  bookmark      Bookmark[]
}

model chatMessage{
  id        String   @id @default(cuid())
  role      String
  content   String
  createdAt DateTime @default(now())
}

model Workout {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  duration    String
  difficulty  String
  goals       String
  body        String
  userId      Int
  User        User       @relation(fields: [userId], references: [id])
  bookmark    Bookmark[]
  exercise    Exercise[]
  date        DateTime   @default(now())
}

model Exercise {
  id        Int     @id @default(autoincrement())
  name      String
  sets      Int?
  reps      Int?
  weight    Float?
  calories  Float?
  workoutId Int
  workout   Workout @relation(fields: [workoutId], references: [id])
}

model Bookmark {
  id        Int      @id @default(autoincrement())
  workoutId Int
  Workout   Workout  @relation(fields: [workoutId], references: [id])
  userId    Int
  User      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, workoutId]) // Composite unique key
}

model ProgressRecord {
  id        Int      @id @default(autoincrement())
  userId    Int
  date      DateTime
  weight    Float
  calories  Int
  steps     Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Schedule {
  id       Int    @id @default(autoincrement())
  userId   Int
  user     User   @relation(fields: [userId], references: [id])
  day      String
  activity String
  duration Int
}

model FitnessActivity {
  id       Int      @id @default(autoincrement())
  userId   Int
  date     DateTime
  user     User     @relation(fields: [userId], references: [id])
  calories Int
  steps    Int
}

model Equipment {
  id      Int    @id @default(autoincrement())
  name    String
  stock   Int
  discount Float
  price   Float
}
